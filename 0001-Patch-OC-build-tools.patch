From 3fb80e979eef0a63600a071725ea267bcd2aff5f Mon Sep 17 00:00:00 2001
From: Mike Beaton <mjsbeaton@gmail.com>
Date: Sat, 22 Oct 2022 16:55:40 +0100
Subject: [PATCH] Patch OC build tools

---
 kill_build.tool  |   3 +
 rebuild_all.tool | 102 +++++++++++++++++++++++++++++
 rebuild_oc.tool  | 162 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 267 insertions(+)
 create mode 100755 kill_build.tool
 create mode 100755 rebuild_all.tool
 create mode 100755 rebuild_oc.tool

diff --git a/kill_build.tool b/kill_build.tool
new file mode 100755
index 00000000..02187e06
--- /dev/null
+++ b/kill_build.tool
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+ps -a | grep build | grep -v "$0" | grep -v "grep" | awk '{print $1}' | xargs kill -9
diff --git a/rebuild_all.tool b/rebuild_all.tool
new file mode 100755
index 00000000..a064ee20
--- /dev/null
+++ b/rebuild_all.tool
@@ -0,0 +1,102 @@
+#!/bin/bash
+
+read OC_VER <<< $(grep OPEN_CORE_VERSION\ *\"[0-9]\.[0-9]\.[0-9]\" Include/Acidanthera/Library/OcMainLib.h | cut -d \" -f 2)
+
+if [ "$OC_VER" == "" ]; then
+  echo "Cannot extract OC version"
+  exit -1
+fi
+
+echo "OpenCore $OC_VER"
+
+TARGET="DEBUG"
+OC_VOLUME_DIR=/Volumes/OPENCORE
+
+SKIP_BUILD=0
+
+while true; do
+  if [ "$1" == "--skip-build" ] || [ "$1" == "-s" ]; then
+    SKIP_BUILD=1
+    shift
+  elif [ "$1" == "--ovmf" ] || [ "$1" == "-o" ]; then
+    OC_VOLUME_DIR=~/OPENCORE
+    TARGET="NOOPT"
+    shift
+  elif [ "$1" == "--dir" ] || [ "$1" == "-d" ]; then
+    shift
+    if [ "$1" != "" ]; then
+      OC_VOLUME_DIR=$1
+      shift
+    else
+      echo "No output dir specified" && exit 1
+    fi
+  else
+    break
+  fi
+done
+
+if ! [ -d $OC_VOLUME_DIR ]; then
+  echo "Target dir ${OC_VOLUME_DIR} does not exist" && exit 1
+fi
+
+if [ "$1" != "" ]; then
+  TARGET=$1
+fi
+
+eval "$(git status | grep "On branch" | awk -F '[ ]' '{print "MY_BRANCH=" $3}')"
+
+if [ "$MY_BRANCH" = "" ]; then
+  eval "$(git status | grep "HEAD detached at" | awk -F '[ ]' '{print "MY_BRANCH=" $4}')"
+  if [ "$MY_BRANCH" = "" ]; then
+    echo "Not on any git branch or tag!"
+    exit 1
+  fi
+fi
+
+BUILD_DIR="./UDK/Build/OpenCorePkg/${TARGET}_XCODE5/X64"
+
+BASE=OpenCore-${OC_VER}-${TARGET}
+VER_ZIP_FILE=~/OC/${BASE}-${MY_BRANCH}.zip
+ZIP_FILE=~/OC/${BASE}.zip
+UNZIP_DIR=~/OC/${BASE}
+
+if [ "$SKIP_BUILD" != "1" ]; then
+  if [ -f "${BUILD_DIR}/${BASE}.zip" ]; then
+    echo "Removing Build file ${BASE}.zip..."
+    rm ${BUILD_DIR}/${BASE}.zip
+  else
+    echo "Build file ${BASE}.zip does not exist!"
+  fi
+
+  echo "Rebuilding..."
+  ARCHS=(X64)
+  TARGETS=(${TARGET})
+  pushd .
+  source ./build_oc.tool --skip-tests || exit 1
+  popd 1>/dev/null
+fi
+
+if [ ! -f ${BUILD_DIR}/${BASE}.zip ] ; then
+  echo "ERROR: Built ${BUILD_DIR}/${BASE}.zip does not exist."
+  exit 1
+fi
+
+echo "Removing old local ${BASE}.zip..."
+rm ${ZIP_FILE}
+
+echo "Removing old local unzipped dir..."
+rm -rf ${UNZIP_DIR}
+
+echo "Copying ${BASE}.zip from build dir..."
+cp ${BUILD_DIR}/${BASE}.zip ${ZIP_FILE} || exit 1
+
+echo "Copying ${TARGET} zip to ${BASE}-${MY_BRANCH}.zip..."
+cp ${ZIP_FILE} ${VER_ZIP_FILE} || exit 1
+
+echo "Unzipping ${BASE}.zip..."
+unzip ${ZIP_FILE} -d ${UNZIP_DIR} 1>/dev/null || exit 1
+
+echo "Copying ${MY_BRANCH} ${TARGET} files to ${OC_VOLUME_DIR}..."
+cp -r ${UNZIP_DIR}/X64/EFI ${OC_VOLUME_DIR} || exit 1
+
+echo "Done."
diff --git a/rebuild_oc.tool b/rebuild_oc.tool
new file mode 100755
index 00000000..12154dee
--- /dev/null
+++ b/rebuild_oc.tool
@@ -0,0 +1,162 @@
+#!/bin/bash
+
+read OC_VER <<< $(grep OPEN_CORE_VERSION\ *\"[0-9]\.[0-9]\.[0-9]\" Include/Acidanthera/Library/OcMainLib.h | cut -d \" -f 2)
+
+if [ "$OC_VER" == "" ]; then
+  echo "Cannot extract OC version"
+  exit -1
+fi
+
+echo "OpenCore $OC_VER"
+
+TARGET="DEBUG"
+OC_VOLUME_DIR=/Volumes/OPENCORE
+
+SKIP_BUILD=0
+
+while true; do
+  if [ "$1" == "--skip-build" ] || [ "$1" == "-s" ]; then
+    SKIP_BUILD=1
+    shift
+  elif [ "$1" == "--ovmf" ] || [ "$1" == "-o" ]; then
+    OC_VOLUME_DIR=~/OPENCORE
+    TARGET="NOOPT"
+    shift
+  elif [ "$1" == "--dir" ] || [ "$1" == "-d" ]; then
+    shift
+    if [ "$1" != "" ]; then
+      OC_VOLUME_DIR=$1
+      shift
+    else
+      echo "No output dir specified" && exit 1
+    fi
+  else
+    break
+  fi
+done
+
+if ! [ -d $OC_VOLUME_DIR ]; then
+  echo "Target dir ${OC_VOLUME_DIR} does not exist" && exit 1
+fi
+
+if [ "$1" != "" ]; then
+  TARGET=$1
+fi
+
+eval "$(git status | grep "On branch" | awk -F '[ ]' '{print "MY_BRANCH=" $3}')"
+
+if [ "$MY_BRANCH" = "" ]; then
+  eval "$(git status | grep "HEAD detached at" | awk -F '[ ]' '{print "MY_BRANCH=" $4}')"
+  if [ "$MY_BRANCH" = "" ]; then
+    echo "Not on any git branch or tag!"
+    exit 1
+  fi
+fi
+
+BUILD_DIR="./UDK/Build/OpenCorePkg/${TARGET}_XCODE5/X64"
+
+BASE=OpenCore-${OC_VER}-${TARGET}
+VER_ZIP_FILE=~/OC/${BASE}-${MY_BRANCH}.zip
+ZIP_FILE=~/OC/${BASE}.zip
+UNZIP_DIR=~/OC/${BASE}
+
+if [ ! -f $VER_ZIP_FILE ]; then
+  echo "Cannot find ${VER_ZIP_FILE}, using 'rebuild_all -s' ..."
+  echo
+  # does not matter if -s is repeated
+  ./rebuild_all.tool -s $@ || exit 1
+  echo
+elif diff -q ${VER_ZIP_FILE} ${ZIP_FILE} &>/dev/null; then
+  >&2 echo "Zip is correct for ${MY_BRANCH} ${TARGET}."
+else
+  >&2 echo "Zip is not correct for ${MY_BRANCH} ${TARGET}."
+  >&2 echo "Removing non-matching unzipped dir..."
+  rm -rf $UNZIP_DIR || exit 1
+
+  echo "Copying ${BASE}-${MY_BRANCH}.zip to ${BASE}.zip..."
+  cp ${VER_ZIP_FILE} ${ZIP_FILE} || exit 1
+
+  echo "Unzipping..."
+  unzip ${ZIP_FILE} -d ${UNZIP_DIR} 1>/dev/null || exit 1
+
+  echo "Copying ${MY_BRANCH} ${TARGET} files to ${OC_VOLUME_DIR}..."
+  cp -r ${UNZIP_DIR}/X64/EFI ${OC_VOLUME_DIR} || exit 1
+fi
+
+efiBases=(
+  "OpenCore.efi"
+)
+
+efiDrivers=(
+  "OpenCanopy.efi"
+  "AudioDxe.efi"
+  "OpenLinuxBoot.efi"
+  "ResetNvramEntry.efi"
+  "ToggleSipEntry.efi"
+  "OpenRuntime.efi"
+)
+
+efiTools=(
+  "OpenShell.efi"
+)
+
+# Remove files we will rebuild.
+echo "Removing from ${OC_VOLUME_DIR}..."
+
+for efiBase in "${efiBases[@]}"; do
+  echo "  ${efiBase}" && rm "${OC_VOLUME_DIR}/EFI/OC/${efiBase}"
+done
+
+for efiDriver in "${efiDrivers[@]}"; do
+  echo "  ${efiDriver}" && rm "${OC_VOLUME_DIR}/EFI/OC/Drivers/${efiDriver}"
+done
+
+for efiTool in "${efiTools[@]}"; do
+  echo "  ${efiTool}" && rm "${OC_VOLUME_DIR}/EFI/OC/Tools/${efiTool}"
+done
+
+echo "Done."
+
+if [ "$SKIP_BUILD" != "1" ]; then
+  # rebuild them
+  echo "Rebuilding..."
+  cd ./UDK
+  source edksetup.sh BaseTools || exit 1
+  build -a X64 -b ${TARGET} -t XCODE5 -p OpenCorePkg/OpenCorePkg.dsc || exit 1
+  cd ..
+fi
+
+# put them back
+echo "Restoring to ${OC_VOLUME_DIR}..."
+
+for efiBase in "${efiBases[@]}"; do
+  echo "  ${efiBase}" && cp "${BUILD_DIR}/${efiBase}" "${OC_VOLUME_DIR}/EFI/OC/${efiBase}" || exit -1
+done
+
+for efiDriver in "${efiDrivers[@]}"; do
+  echo "  ${efiDriver}" && cp "${BUILD_DIR}/${efiBase}" "${OC_VOLUME_DIR}/EFI/OC/Drivers/${efiDriver}" || exit -1
+done
+
+for efiTool in "${efiTools[@]}"; do
+  echo "  ${efiTool}" && cp "${BUILD_DIR}/${efiBase}" "${OC_VOLUME_DIR}/EFI/OC/Tools/${efiTool}" || exit -1
+done
+
+echo "Done."
+
+if [ -f "${OC_VOLUME_DIR}/EFI/OC/Tools/Shell.efi" ]; then
+  mv "${OC_VOLUME_DIR}/EFI/OC/Tools/Shell.efi" "${OC_VOLUME_DIR}/EFI/OC/Tools/OpenShell.efi" || exit -1
+fi
+
+# Mark binaries to be recognisable by OcBootManagementLib.
+bootsig="./Library/OcBootManagementLib/BootSignature.bin"
+efiOCBMs=(
+#  "/EFI/BOOT/BOOTx64.efi"
+  "/EFI/OC/OpenCore.efi"
+  )
+for efiOCBM in "${efiOCBMs[@]}"; do
+  echo "Signing ${efiOCBM}..."
+  dd if="${bootsig}" \
+     of="${OC_VOLUME_DIR}${efiOCBM}" seek=64 bs=1 count=56 conv=notrunc || exit 1
+done
+
+echo "Done."
-- 
2.36.1

